generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model appointment {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  date        DateTime @db.Date
  time        DateTime @db.Time(6)
  patient_id  String   @db.Uuid
  practice_id String   @db.Uuid
  status      String   @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  patient     patient  @relation(fields: [patient_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  practice    practice @relation(fields: [practice_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model inventory {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  item_name       String    @db.VarChar(255)
  quantity        Int
  reorder_level   Int
  last_order_date DateTime? @db.Date
  next_order_date DateTime? @db.Date
  practice_id     String    @db.Uuid
  created_at      DateTime  @default(now()) @db.Timestamp(6)
  updated_at      DateTime  @default(now()) @db.Timestamp(6)
  practice        practice  @relation(fields: [practice_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model patient {
  id             String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  first_name     String           @db.VarChar(255)
  last_name      String           @db.VarChar(255)
  dob            DateTime         @db.Date
  gender         String           @db.VarChar(255)
  phone_number   String?          @db.VarChar(255)
  address        String?          @db.VarChar(255)
  practice_id    String           @db.Uuid
  created_at     DateTime         @default(now()) @db.Timestamp(6)
  updated_at     DateTime         @default(now()) @db.Timestamp(6)
  appointment    appointment[]
  practice       practice         @relation(fields: [practice_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  treatment_plan treatment_plan[]
}

model practice {
  id            String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description   String?       @db.VarChar(255)
  location      String?       @db.VarChar(255)
  opening_hours String?       @db.VarChar(255)
  closing_hours String?       @db.VarChar(255)
  name          String        @db.VarChar(255)
  created_at    DateTime      @default(now()) @db.Timestamp(6)
  updated_at    DateTime      @default(now()) @db.Timestamp(6)
  user_id       String        @db.Uuid
  tenant_id     String        @db.VarChar(255)
  appointment   appointment[]
  inventory     inventory[]
  patient       patient[]
  user          user          @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model treatment_plan {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String    @db.VarChar(255)
  description String?   @db.VarChar(255)
  cost        Int
  start_date  DateTime  @db.Date
  end_date    DateTime? @db.Date
  patient_id  String    @db.Uuid
  created_at  DateTime  @default(now()) @db.Timestamp(6)
  updated_at  DateTime  @default(now()) @db.Timestamp(6)
  patient     patient   @relation(fields: [patient_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String     @unique @db.VarChar(255)
  firstName   String?    @db.VarChar(255)
  lastName    String?    @db.VarChar(255)
  roq_user_id String     @db.VarChar(255)
  tenant_id   String     @db.VarChar(255)
  created_at  DateTime   @default(now()) @db.Timestamp(6)
  updated_at  DateTime   @default(now()) @db.Timestamp(6)
  practice    practice[]
}
